CLASS 5/5/2022
****************************************************************************
MODULE 2: BASH SCRIPTING
------------------------

AUTOMATING IT PROCESSES OR WORK LOADS
-------------------------------------
SHELLS: A Shell is an interpreter interpriting commands to the opperating system. eg. as users are created shells are also assigned to them as below

how to check the shell that is running
      echo $SHELL

to find users created in the server/ is they have shells
       cat /etc/passwd: yes as seen below

user  (Uid ) (Gid)    (homeDir)   (shell)            u = user g = group
simon:x:1001:1001::/home/simon:/bin/bash
landmark:x:1002:1005::/home/landmark:/bin/bash
paul:x:1003:1003::/home/paul:/bin/bash

how to check the shell that is running
      echo $SHELL
to list all the shells (interpreters) in the system we
        cat /etc/shells

SHELL SCRIPTS
--------------
Shell scripts are a collection of commands:
e.g write a script that will greet users in the morning
  vi hello.sh
  best practice is to start with shebank:
     #!/bin/bash  = shell script
     #!/bin/pyton  = pyton script
--------------------------------------------------------------------------------
NOTE: shebank tells the type of script like above: pyton. java, bash   
--------------------------------------------------------------------------------
e.g
 vi hello.sh
#!/bin/bash
echo "welcome to Landmark Technologies"
echo "You are now a millionaire"
echo " today is the"
date
echo "thanks for coming"

TAKE NOTE OF NAMING CONVENTION
==============================
Naming conventions:
  deploy.sh  = Shell-script
  test.txt   = text file 
  app.sc     = Shell-script
  app.java   = java code 
  monitor.py =python code/script 
  app.yaml   = playbook

running the script now or to execute our script above
./hello.sh   
must have a executable permission for the file to run as a script or comand
    to change or assign permission we do any below  see previous notes
       chmod +x hello.sh    or
       chmod 764 hello.sh   or
       chmod 0+x hello.sh   or
       we use sh hello.sh 

Naming conventions:
====================
Scripting or automation langauges :
  1. Bash Shell Scripting
  2. Python 
  3. Groovy  (Jenkins)
  3. Rudy
  4. Yaml  
      (k8s, Ansible, CloudFormation)
  5. JSon 
  6. HCL - Terraform  
  7. XML = 
  8. html 
  9. go/golang    
  
  to get to our script we
     cat -n hello.sh

SCRIPT INTERRETERS {to check the scripts interpreters in ypur server}
cat /etc/shells


another small script
    #!/bin/bash
    #this script will deploy applications
    #in kubernetics cluster
    deploy.sh
    echo "welcome to Landmark"
    echo "apps are ready for deployment"
    sleep 10
    echo "deployment sucessful"
vi deploy.sh   TO CREATE  ABOVE  
./deploy.sh    TO RUN
  
WE CAN ALSO RUN IT DIRECTLY WITH AN INTERPRETER
    we have the following interpreters in the linux system
    TO SEE: cat /etc/shells
      bash
      sh
      tsh
      ksh
      csh

How to make scripts/code easily understand?
    Add explanations or comments 
    comment: metadata = data about data 
    Explains what the script is achieving 
    Use to eplain the script file
    single-line comment  we use #
 Who are the comments meant for?
  1. It make your script/code to be understood by 
     you and others 
  2. It make your script/code easily reusable in the future
  3. Facilitate/ease troubleshooting and debugging
  4. comments are Good for teams:
        6. developers writing codes/scripts 
        1. Scrum master 
        3. DevOps Engineers 
        1. DevOps Security Engineer 
  can you write your comments first and then 
  under it write your script? or does it have to 
  come between the scripts? Depends on you.  

e.g 
vi slc.ch      {slc = single line comment}
#!/bin/bash
echo single line coment begins
#this is a simple script
#this script will work in linux OS
# Authur: Landmark Technologies
echo single line comement ends
date
echo congratulations you made it. 
  TO RUN WE TYPE: sh.

MULTY-LINE COMMENTS
===================
DEPENDING ON THE LANGUAGE, WE HAVE DIFFERENT START & END NOTATIONS
 eg
 xml :
    <!--

    -->
  groovy:
    /* 

    */ 
  python: etc

examle for bash scripting (make sure there is no space after boy)
 vi mlc.sh               (TO CREATE  mlc = Multy line comment)
 #!/bin/sh 
 echo Multi-line comments starts 
 <<boy
 Author: Simon
 This is a simple script
 This script will work in Linux OS
 Author: Landmark Technologies
 echo Jesus is Lord 
 boy
 echo Multi-line comments ends 
 date  
sh mlc.sh     (TO RUN) {syntax running find out more here}

VARIABLES
=========
There are two types of variables in Linux shell script. 
    System define variables
    user define  variables 
user define  variables: 
  
  Variables created/defined by the users eg
  ------------------------------------------ 
vi var.sh   (to create)

#/bin/bash 
company=LandmarkTechnology 
address=Canada
name=SimonLegah 
#VariableName is use to call a variable in shell scripting
echo The Director is $name 
echo $name works for $company 


SYSTEM VARIABLES: 
*****************
  Variables defined by the system
  environmental variables (env)
  to fineout available env int] the system. execute env
  env Ent  

eg
  HOSTNAME=db
  SHELL=/bin/bash
  TERM=xterm
  HISTSIZE=1000
  USER=simon
  HOME=/home/simon
  LOGNAME=simon
are all system variables
  to see, 
  echo HOME
  echo $SHELL 
  echo $PWD 
  echo $HOSTNAME 
  echo $HISTSIZE 
  1000

  HISTSIZE IS THE NUMBERT OF EXECUTED COMANDS DONE ON A SESION
   TO SEE YOUR HISTORY, : 
     history Ent
CAN USE THE export comand to change the HISTSIZE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   export HISTSIZE=80   = changes effected for a session TO 80 HISTORY
   export HISTSIZE=80 Ent  (this changes just for a session)

   
   TO CHANGE PERMENTLY GO TO 
   .bashrc and .bash_profile   (enforce changes to specific users)
   
   vi .bashrc = enforce changes for a specific user
   vi .bashrc
   export HISTSIZE=2000 eg can change to 2000
   source .bashrc        (this comand precedes to enforce change if not it will not change)

BELOW IS .bashrc File
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2
# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
        . /etc/bashrc
fi
*** GIL change here*** export HISTSIZE=1500  (THIS WILL MAKE IT PERMANENT )

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]
then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/etc/profile will enforce the changes to all users  
 ONLY the root user can modify this file 
 sudo vi /etc/profile  
 export HISTSIZE=1500 
 source /etc/profile  (this comand precedes to enforce change)

or 
 sudo echo "export HISTSIZE=1500" >> /etc/profile
 File management  = files and directory 
                   dir      file 
 full Permission   0777     0666 
 expected perm.    0777     0666
                   ----     -----
                   0000      0000
                   -----     -----
Creating a user:
  sudo adduser enock 
   user-id = 1004   
 Where are users created: In the system/server 
   server/system:
    ip-address = 54.85.146.233
    HOSTNAME   = ip-172-31-19-167.ec2.internal
      sudo hostname db 
    id         = i-027214ccfa75d5b0b
****************************************************************************

CLASS 5/7/2022
****************************************************************************
A script is a collection of one or more commands organise in a file.

eg 1
vi app.sh
app.sh 
echo JESUS IS LORD
sh app.sh (To execute)

eg 2
TO CHECH MEMOREY OR SPACE UTILISATION
------------------------------------
vi monitor_server.sh
# check for cpu and memory utilisation
df -h
free -m
du -h
top
dh
sh monitor_server.sh

dh -h      will check howmuch cpu is in use
free -m    to check memory use
du -h      check for resources used bybfiles
top        

RECALL*** LAST CLASS
variables:
MOST SYSTEM VARIABLES ARE DEFINED IN CAPS SO ITS A GOOD PRACTICE FOR USER DEFINED VARIBLES TO BE IN LOWERCASE******
  
  code quality (THINGS TO CHECK FO)

systems defined variables
   echo $USER
   simon 
user defined variables
  usd.sh 
  USER=Tesla 
  echo $USER

CODE QUALITY CHECKS

eg 1 code smell (not a good practice) TRY
 
bank-app.sh  
username=simon
password=admin123
pin=12345
echo $username welcome to TD Bank  
echo your pin $pin 
echo login successful 

eg 2      (a better practice) TRY   ALWAYS ADD SHBANG #/bin/bash 
bank-app1.sh
 echo please enter your username 
 read username 
 echo The name you entered is $username
 echo please enter your pin
 read pin     
 echo The name you entered is $pin 
 echo login successful 
--------------------------------------------------------------------------
Take not of read Command
read -s (reads the password or any info as a secret)

eg3
vi login.sh 
------------------------------------------------------------------------ 
 echo please enter your username 
 read username 
 echo please enter your password 
 read -s password 
 echo $username welcome to paypal
-------------------------------------------------------------------------
sh login.sh

REMARK: cat -n will get file with numbered lines****

eg 4

TO ADD A USER SCRIPT
create_user.sh 
This script will create and manage users
     in redhat and centos Linux servers
adduser 
----------------------------------------------------------------------------
vi create_user.sh 
<<mm
This script will create and manage users
     in redhat and centos Linux servers
Run only as root user or users with sudo access
mm
echo Please enter your username
read newUser
sudo adduser $newUser
echo Please enter your password
read -s password
echo "$password" | sudo passwd "$newUser" --stdin
echo Congratlations your username is $newUser
# verify if the user account was created
id  $newUser
grep $newUser  /etc/passwd
tail -3 /etc/passwd
-----------------------------------------------------------------------------
REMARK:  tail -1 /etc/passwd  if we want to see the last password creates
Explain your experience in automation/scripting IQ
-----------------------------------------------------------------------------  

COMMAND LINE ARGUMENTS: <<55.25min)
command line arguements CLA
db_backup.sh 
vi db_backup.sh  
# This script will backup mySQL data bases
# please specify the environment as an argument
# Please specify the server and your details as arguments
echo data base ready for backup
echo backup in progress
sleep 5
echo backup completed
 echo $? 
 echo $$ 
 echo $#
 echo $* 
 echo $0 
 echo $1
 echo $3
echo the scriptName is $0
echo The first argument is $1
echo The third argument is $3
echo $3 
 
 NOTES:
 echo $? IS THE STATE OF THE SCRIPT IF 0 OK IF ?= 0 THEN NOT OK
 echo $$ 
 echo $#
 echo $* 
 echo $0 IS THE SCRIPT NAME
 echo $1 IS THE FIRST ARGUMENT
 echo $3 IS THE THIRD ARGUMENT

NOTE: WE CAN RUN THE SCRIPS WITH \= ARGUMENTS DEPENDING OUR SITUATION
ENVIRONMENTS
As a devops Engineer, task will be run on certain environments WHICH ARE:
dev     IS WHERE DEVELOPERES ARE RUNNING THEIR TASK
prod    IS EXPOSING WHAT HAS BEEN DONE TO CUSTUMERS
test    IS TESTING WHAT DEVELOPERS HAVE DONE

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&7
FROM CLASS 27  OTHER EXAMPLES
echo '$0'  = the scriptName
  echo '$1'  = the first argument
  echo '$n'  = the nth argument
  echo '$#:' = no of arguments
  echo '$$:' = process ID 
  echo '$0:' = scriptName
  echo '$2:' = 2ND argument
  echo '$*:' = Display all the arguments / LIST OF ARGUMENTS
  echo '$@:' = Display all the arguments / LIST OF ARGUMENTS
  echo '$?:' = STATUS OF THE LAST RUN command
-------------------------------------------------------------------------------

cla.sh 
date 
whoami
echo 'The scriptName is' $0 
echo 'The first argument is' $1 
echo 'The 10th argument is' ${10} 
echo 'The processID is'    $$
echo 'The arguments are' $* 
echo 'The number arguments is' $@
Date 
echo "The of the result last command is " $? 

IQ: What is the significant of  '$?' is scripting? 
    $? gives the STATUS of the last run command.
    It can either be 
       0 meaning its ok (error free)
       1-127 (something is wrong or missing)

NOTE: THE ps command will demonstrate the pprocess id (what ever is running in the server has an id assigned to it)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

environments:  
  dev 
  test
  prod 
db servers:
  mySQL1, mysql2 
------------------------------------------------------------------------------

EDIDTING THE SCRIPT
[simon@db ~]$ cat db_backup.sh
# This script will backup mySQL data bases
# please specify the environment as an argument
# Please specify the server and your details as arguments
echo data base ready for backup
echo backup in progress
sleep 5
echo backup completed
echo the scriptName is $0
echo The first argument is $1
echo The third argument is $3
echo The number arguments are $#
echo The list of the arguments are $*
echo The list of the arguments are $@
echo The process id is  $$
date
echo The status of the last run command is $?
Date
date The status of the last run command is $?

IQ: What does $? represent in Scripting?    echo $? to find out each CMD status
'''''''''''''''''''''''''''''''''''''''''''
$? represent:
 The status of the last run command.
 if $? = 0 that implies ok  
 if $? != 0 that implies something is wrong 
 	$? = 0  = ok  
   or 
   $?  = 1---127  = implies something is wrong 
 	  command not found = 127 
 	  No such file or directory = 1 
NOTE: echo $?  AFTER ANY COMMAND TO FIND OUT STATUS
--------------------------------------------------------------------------------

EXAMPLE OF SIMPLE ARITHMETIC PROGRESSION
e.g1
vi arth.sh
expr 10 - 3
expr 10 + 3
expr 10 \* 3
expr 10 / 3
expr 10 % 3

eg 2
vi sao.sh  
echo welcome to simple arithmetic operations
echo please enter the first number
read num1
echo please enter the second number
read num2
echo  The total is =
expr $num1 + $num2
echo  The difference is =
expr $num1 - $num2

eg 3
vi sao.sh 
echo welcome to simple arithmetic operations
echo please enter the first number
read num1
echo please enter the second number
read num2
echo  The total is = `expr $num1 + $num2` 
echo  The difference is `expr $num1 - $num2

NOTE: BATIC ( ` ) JUST UNDER ESC KET IS USED TO COMPLET CMD ON SAME LINE
-----------------------------------------------------------------------------

eg 4
vi cla2.sh
#if (( $# >= 3 ))
#if [ $# -gt 3 ]
#if [ $# -lt 3 ]
if (( $# == 3 ))
then
#Number of arguments on the command line.
echo '$#:' $#
#Process number of the current process.
echo '$$:' $$
#Display the 3rd argument on the command line, from left to right.
echo '$3:' $3
#Display the 10th argument on the command line, from left to right.
echo '${10}:' ${10}
#Display the name of the current shell or program.
echo '$0:' $0
#Display all the arguments on the command line using * symb
echo '$*:' $*
#Display all the arguments on the command line using @ symb
echo '$@:' $@
date
echo '$?:' $?
else
echo "Please Pass the 3 command line args along with script "
fi


NOTE: MAKE SURE TO ADD THREE COMMAND LINS ALONG WITH EXECUTION COMAND
       sh  cla2.sh arg1 arg2 arg3     (thats three arguments)
       arguments can be anything like the person running the script, the department, the server etc
============================================================================
NOTE: Inode is how the machine will understand our input or commands
-----------------------------------------------------------------------------

****************************************************************************

CLASS 5/8/2022   But notes from class 27 video date as: 
****************************************************************************
We can equally perform tasks using Graphical user interface 
Linux commands --- Are used to perform or execute tasks on a server
   Commands can help in task automation 
   scripting escalate the use of commands for automation 

Ansible  --> Playbooks = we automate tasks on multiple hosts
scripting -> scripts   = we easily automate tasks on the localhost (1 server)
   bash scripts 
   python scripts 
   groovy scripts

EQUALITY AND INEQUALITY:
  -eq  or  == represent equals to      (x == y or  x -eq y)
  -ne  or  != represent not equals to   (x != y or x -ne y)
  -gt  or  >  represent greater than     (x>y or  x -gt y)
  -lt  or  <  less than 
  -ge  or >=  greater than or equals to
  -le  or <=   less than  or equals to


IF CONDITIONs
Syntax:

vi if1.sh
if
then
 Display commands list if condition is true.
 else
 Display commands list if condition is false.
fi

echo "Please enter your price"
read p
if [ $p == 2000 ]
then 
echo "The price is good for the business"
echo "Please deliver the product"
fi 


echo "Please enter your pin"
read pin 
if [ $pin -eq 5470 ]
then 
echo 'You entered a valid pin'
echo 'Welcome to TD, how can we help you'
else 
echo "Sorry, your pin is invalid. Please contact a branch."
fi 

vi if2.sh
#!/bin/bash
echo "Please enter a number"
read num1
echo "Please enter another number"
read num2
if [ $num1 == $num2 ]
then
echo "$num1 is equals to $num2"
else
echo "$num1 is not equal to $num2"
fi

#!/bin/bash
echo "enter the offer price of customer1"
read price1
echo "enter the offer price of customer2"
read price2
if [ $price1 > $price2 ]
then
echo $price1 is greater than $price2"
echo "Sell to customer1"
elif [  $price1  < $price2 ]
then
echo "$price1 is less than $price2"
echo "Sell to customer2 who's offering a better deal"
else
echo "$price1 is equal to $price2"
echo "Request for an increase a choose the best possible offer"
fi

#!/bin/bash
if (( $# == 3 ))
then 
echo "scripting i good"
echo "Always run this script with 3 arguments"
else 
echo "Please enter  3 arguments to run this script"
fi 
------------------------------------------------------------------------
NOTE: WE USE (( $# == 3 )) OR [ $# == 3 ]
-------------------------------------------------------------------------

LOOPS
---------------------------------------------------------------------------
Loops : condition with multiple iterations 
Syntax:
for (condition ) 
do
execute here all command/script until the condition is
not satisfied. (And repeat all statement between do and done)

done
Syntax:
or-loop:
c/c++/java:
for ( initiallation;conditions;inc/dec )
{
  write statements/commands
}
-------------------------------------------------------------------------
FOR LOOPS
------------------------------------------------------------------------
shell-script:
for loops:
for (( initiation;conditions;inc/dec ))
do 
commands 
commands 
done

eg 1 for loops

vi fl1.sh 
echo 'for loop starts'
for (( a=1;a<=6;a++ )) 
do 
echo $a 
done
echo 'for loop ends'

std Output:
  a = 1 
  a = 1 + 1 = 2
  a = 2 + 1 = 3 
  a = 3 + 1 = 4 
  a = 4 + 1 = 5 
  a = 5 + 1 = 6 
  =======================
  a = 6 + 1 = 7 this line not fulfilled

std Output:
  a = 1 
  a = 1 + 1 = 2
  a = 2 + 1 = 3 
  a = 3 + 1 = 4 
  a = 4 + 1 = 5 
  a = 5 + 1 = 6 
  =======================
  a = 6 + 1 = 7 thisine not fulfilled

----------------------------------------------------------------------------
  Assignment:
  Write a shell script to print numbers from 100-90 
   using for-loop
eg 2 for loops  (ASIGNMENT)

vi forl_ass.sh 
echo 'for loop starts'
for (( a=100;a>=90;a-- )) 
do 
echo $a 
done
echo 'for loop ends'
-------------------------------------------------------------------------------

WHILE LOOP
-------------------------------------------------------------------------------
while loop 
initiallation 
while [ condition ]
do 
commands 
done
----
#while.sh 
echo "while loop demo starts..."
i=1
while [ $i -le 5 ]
do
echo $i
i=`expr $i + 1`
done
echo "while loop is over ..."

Output:
  i=`expr $i + 1`
  i = 1 
  i = 1 + 1 = 2 
  i = 2 + 1 = 3 
  i = 3 + 1 = 4 
  i = 4 + 1 = 5
  ======================
  i = 5 + 1 = 6

--------------------------------------------------------------------------------
eg 3 while loop

#initiation
vi whloop3.sh
rc=5000
echo "minimun request from clients is 5000"
while [ $rc -le 50000 ]
do
echo $rc
rc=`expr $rc + 5000`
done
echo maximum requests reached.
# The server maximum load is 50000 requests.
# Performing load test for my application
# Using while loop
# rc=request-count
<<rc
rc = 5000
rc = 5000 + 5000 = 10000
rc
================================================================================

HOW TO MANAGE MULTIPLE CONDITIONS IN LINUX


switch case:
  yum install | remove | update | upgrade 
  systemctl httpd start | status | restart | enable | disable | stop

tomcat:
  catalina.sh   | status | restart | stop | start | version
sonarQube:
  sonar.sh  | status | restart | stop | start | version

eg 1
sh sonar.sh start 
sh sonar.sh stop 
 switch case syntax:
  case $1 in 
     options
    option1)
      commands;;
    option2)
      commands;;
    option3)
      commands;;
    *)
       commands;;
  esac
----------------------------------------------------------------------------
eg 2
vi sc.sh
echo "learning switch cases in scripting"
case $1 in 
start)
echo "starting sonarQube server"
echo "sonarQube server started";;
stop)
echo "stopping sonarQube server"
echo "sonarQube server stopped";;
restart)
echo "restarting sonarQube server"
echo "sonarQube server restarted";;
*)
 echo "sorry you passed the wrong option"
 echo "Options are start | stop | restart" 
 ;;
esac
echo "switch cases are very good and easy to understand"

NOTE: *) means ???

Differences b/w scripts (scripting) and code (programming)?
programming: instructions that tell a computer to perform a certain tasks
script: file containing commands

Powershell --> use to run commands in windows OS (servers ) 
  bash-shell --> use to run commands in Linux OS (servers ) 
------------------------------------------------------------------------------
NOTE: Knowing scrpting will make work better and easiear
      DeVops Engineers are paid high because of Automation *******
-----------------------------------------------------------------------------

CLASS 05/12/2022

5/12/2022
common commands:
  vi or vim to create and modify scripts 
  cat or cat -n to display or read the content of a script 
  sh/bash/tsh/csh ksh to run/execute the script 
     sh class.sh
     bash class.sh 
     ksh class.sh  

 vi class.sh  = this create the script
 sh class.sh  = to run the script  

6 hours of live classes and 3 hours video:  

scripting is all about automation using scripts:
Examples of autamted tasks:
  Explain your experience in bash shell scripting??
  In Landmark I have written and Maintained/modify
  shell scripts to:
    monitor_servers.sh  
    dataBase_backup.sh 
    deploy_app.sh 
    access_account.sh  
    user_management.sh  
    file_management.sh  

  sh access_account.sh  simon dev  cicd 

  echo $1 =  simon
  echo $2 =  dev 
  echo $3 =  cicd 
  echo $0 =  access_account.sh
switch cases:
  access_account.sh 
  case $1 in 
  cashdeposit) 
      echo "slot in the cash" 
      echo "cash deposited" ;;
  checkdeposit)
      echo "slot in your checks" 
      echo "cash amount deposited" ;;
  withdrawal)
  balance)
  transfer)
  *)
      echo "You entered an invalid option"
  esac     

sh access_account.sh  

===========
switch.sh   
echo "Switch case demo starts.."
case $1 in
start) echo "starting sq server.."
echo "started..."
;;

stop)
echo "stopping the server"
echo "server stopped";;

restart)
echo "restarting the server"
echo "server restarted"
;;

*)
echo "You have to pass start|stop|restart"
;;

esac

echo "Switch case is over"

https://github.com/LandmakTechnology/scripting

  script = is a collection of one or more commands

HOW DO YOU RESOLVE OR TROUBLESHOT ISSUES FROM SCRIPTS?
------------------------------------------------------------------------------------
  -study the errors messages carefully 
  -vi scriptName and fixed the error 
  -Run the scripts in Debugging mode by passing the -x flag   
     sh -x debug.sh  (TO RUN IN DEBUGING MODE)

 debug.sh 
 echo "I am rich"
 echo 'DevOps is easy' 
 echo "Today is the: " 
 Date 

What is the difference b/w Redirect [>] and append [>>]
  Redirect [>] = overides/replaces content 
     echo Jesus saves > save.txt  
     cat /etc/passwd > users.txt 
  append [>>]  = add to the content  
     echo Jesus is alive >> save.txt  

Input - Output redirection in Linux / Shell Scripts:
  cat /etc/passwd  = Display all users   
  cat /etc/group   = Display all groups 
  history  
  history > his.log      
 
   2>  Redirect standard error
           sh debug.sh 2> output.error 

  1>  Redirect standard output
        sh debug.sh.sh 1> output.log 
        sh debug.sh.sh > output.log

2>&1  Redirect standard error and  standard output
       bash debug.sh > logs 2>&1
       bash debug.sh > /dev/null 2>&1

Functions:   
cronJobs :
  Attorney? 
  Lawyer?

A function is a piece of code that perfoms
 a specific task and avoids repetition.

1. Define a function
   syntax for Functions in shell scripting???
   
   fn(){
    #commands
   }

  usermgt() {
    echo please enter your lastName
    read name 
    sudo useradd $name  
  }
  # invoke the function 
  usermgt
  echo Create an user account for the admin   
  usermgt

fn.sh 
# functions avoid duplication in coding
usermgt() {
    echo please enter the lastName of the user
    read name
    sudo useradd $name
    echo "assign a temporal password to;  $name  "
    sudo passwd $name
  }
  # invoke the function
  echo create an  account for the  TeamLead.
  usermgt
 echo create an  account for the 2nd member of your team.
  usermgt
 echo create an account for the 3rd member of your team.
usermgt

----------------------------------------------------------------------------
fn2.sh 
#!/bin/bash
check()
{
if [ -e /etc/passwd ]
then
 echo "It exist. Please proceed ..."
 grep roma /etc/passwd
 tail -5 /etc/passwd
 touch test.java /home/simon/
else
 echo "It doesn't exist"
fi
}
check
------------------------------------------------------------------------------------
EUROPE / Germany visa ---> Part time  
===========================================
IQ: Explain your experience in batch shell scripting ? 
I have written and maintained the following scripts;
1. monitor_server.sh  = server monitoring
     Memory / cpu  > 85% 

2. deploy_app.sh 
    build_Server = app.war 
    app_Server
    appServer 
    scp app.war ec2-user@appServer:/tmp 

3. sshkey_gen_uploadGithubAPI.sh

4. db-backup.sh 
    Linux commands 
        cp 
        scp 
    DBA = sql 

5. Patching for optimisation 
      yum update
      yum remove  

6. Package management = 
      Git / Maven / Jenkins manages packages
      tree  

7. user and file Management 
    create-user.sh  
     echo "Enter the username for the new user you want to create" 
     read username 
     sudo useradd $username  = useradd (sbin)
     echo "Please Enter the password for the new user" 
     read -s password 
     echo $password | passwd $username  

8. Use for systemd management and starting applications 
    
IQ: Explain a problem you encountered and how you 
    resolved it in scripting??

You ran a script and the exit code != 0. 
 How did you troubleshoot? 
    echo $? == 0  ok 
    echo $? != 0  not ok 
       date  --- Date   
   Identify and explain 
     User management shell script failing
     1. I ran the script in debugging mode  = sh -x scriptName 
            useradd $username   
            useradd (sbin)
        sudo    

     2. I contacted my peers on our help desk 

     3. Check google, youtube and stack overflow

     4. Check with the vendor  = Server (EC2)  = 
          echo $BASH_VERSION = version 
         
     5. Open Source  = enterprise 

 NB: *What you know is more important than who you know.*
     *Who you are is more important than where you are.*

usecases

create-user.sh 

sh monitor_server.sh
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

CLASS 05/14/2022

GENERAL REVISIONS TO DATE: SEE RUNNING NOTES 13 OF THE 05/14/2022
-------------------------------------------------------------------------------------
REVISION ON HOW TO CONNECT TO A SERVER
Jira dashboard: (ASSIGNMENT BOARD) FOR SIMON & GRACE
  simon 
  Grace 
   1. Create a project directory for Tesla [dev, stage, uat, prod] 
      in our webServers[redhat] running and hosted in aws cloud. 
Document project requirements:
  1. Grant Grace the access to the aws account 

  2. Download and install an ssh-client[mobaXterm, puTTy] or gitbash 

  3. Connect to the webServer using the ssh-client 

  4. Connect with password authentication 
       webserver public_ip address: 18.188.200.18 
       userName: grace 
       password: admin123 
       open port ssh 22 on the security group or firewall
       using the ssh-client access the server with:
           ssh grace@54.85.146.233
    NB: Make sure password that authentication is enabled
        sudo vi /etc/ssh/sshd_config   (TO AUTHENTICATE PASWD FROM NO TO YES 3RD LINE)
        sudo systemctl restart sshd   
  
  5. connect with ssh-key authentication  
       webserver public_ip address: 54.85.146.233 
       userName: grace 
       private_key: class28key.pem   
       open port ssh 22 on the security group or firewall
       using the ssh-client access the server with:
           ssh -i class28key.pem grace@54.85.146.233
  
  6. Granting sudo right to users:
      sudo vi /etc/sudoers  
      sudo visudo 

  ssh ec2-user@18.188.200.18
  ssh simon@18.188.200.18 
 user: simon
 remote_host: 18.188.200.18 
 password: ***fFSAGS 
    ssh simon@18.188.200.18 
    ssh -i class27key.pem  simon@18.188.200.18
 private_key:
    ssh -i class27key.pem ec2-user@18.188.200.18 


usecases
create-user.sh 
sh monitor_server.sh

Scheduling Tasks/Workloads to run automatically.
Assignment/Ticket:
  1. Write a script that monitors servers every minutes 
     This script should alert management of anomalies 
  2. Write a script that backup dbServers every midnight
Execution:
1. We shall use cronJobs and create cron tables to achieve this 
   Automation and Schedule the tasks to run as expected. 

   cron table   = contains scheduled tasks   
   crontab -e   = To edit the cron table 
   crontab -l   = List the cron table


Access to the crontab should be restricted because
 1. processes/Workloads consumes systems resources [cpu, Memory]
 2. some Tasks can affect processes and shutdown the system   
How to restrict crontab access:
   sudo touch /etc/cron.allow

   sudo touch /etc/cron.deny
      peter  
Memory


  sh monitor_server.sh 

* * * * *   /home/simon/monitor_server.sh  >> /tmp/monitor.log

* * * * * /home/simon/monitor_server.sh >/dev/null 2>&1
1 0 * * 0 /home/simon/db_backup.sh >/dev/null 2>&1
1 0 * * 0 /home/simon/db_backup.sh >/home/simon/log.monitor 2>&1

*  = every minute 
*  = every hour
*  = every day 
*  = every month 
*  = every week 
==============
 mac terminal   
 
  90$/hr   110$/hr  

--------------------------------------------------------------------------------------

